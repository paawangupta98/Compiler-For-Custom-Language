; ModuleID = 'IR Generator'

@x0 = common global i32 0, align 4
@yar = common global i32 0, align 4
@zarray = common global [102 x i32] zeroinitializer, align 4
@tarrya = common global i32 0, align 4
@i = common global i32 0, align 4
@0 = private unnamed_addr constant [2 x i8] c"\0A\00"
@1 = private unnamed_addr constant [2 x i8] c" \00"
@2 = private unnamed_addr constant [5 x i8] c"haha\00"
@3 = private unnamed_addr constant [2 x i8] c"\0A\00"
@4 = private unnamed_addr constant [2 x i8] c" \00"
@5 = private unnamed_addr constant [5 x i8] c"asfd\00"

define i32 @main() {
entry:
  store i32 6, i32* @x0
  %0 = load i32, i32* @x0
  %subtmp = sub i32 %0, 624
  %addtmp = add i32 7, %subtmp
  store i32 %addtmp, i32* @yar
  store i32 5, i32* @x0
  %printfCall = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  ret i32 1
}

declare i32 @printf(i8*, ...)
