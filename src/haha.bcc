; ModuleID = 'IR Generator'

@0 = private unnamed_addr constant [2 x i8] c"\0A\00"
@1 = private unnamed_addr constant [2 x i8] c" \00"
@2 = private unnamed_addr constant [3 x i8] c"%d\00"
@3 = private unnamed_addr constant [3 x i8] c"%s\00"
@i = common global i32 0, align 4
@temp = common global i32 0, align 4
@sum = common global i32 0, align 4
@j = common global i32 0, align 4
@a = common global i32 0, align 4
@b = common global i32 0, align 4
@n = common global i32 0, align 4
@m = common global i32 0, align 4
@count = common global i32 0, align 4
@ar = common global [100000 x i32] zeroinitializer, align 4
@k = common global i32 0, align 4
@4 = private unnamed_addr constant [9 x i8] c"Count = \00"

define i32 @main() {
entry:
  %readCall = call i32 (...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* @n)
  %readCall1 = call i32 (...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* @k)
  %0 = load i32, i32* @n
  store i32 1, i32* @i
  br label %for

for:                                              ; preds = %forcont, %entry
  %1 = load i32, i32* @i
  %lecomparetmp = icmp ule i32 %1, %0
  br i1 %lecomparetmp, label %forcont, label %forcontinue

forcont:                                          ; preds = %for
  %2 = load i32, i32* @i
  %ar_Index = getelementptr [100000 x i32], [100000 x i32]* @ar, i32 0, i32 %2
  %readCall2 = call i32 (...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* %ar_Index)
  %addtmp = add i32 %1, 1
  store i32 %addtmp, i32* @i
  br label %for

forcontinue:                                      ; preds = %for
  store i32 0, i32* @count
  %3 = load i32, i32* @n
  store i32 1, i32* @i
  br label %for3

for3:                                             ; preds = %forcontinue10, %forcontinue
  %4 = load i32, i32* @i
  %lecomparetmp6 = icmp ule i32 %4, %3
  br i1 %lecomparetmp6, label %forcont4, label %forcontinue5

forcont4:                                         ; preds = %for3
  %5 = load i32, i32* @i
  %addtmp7 = add i32 %5, 1
  store i32 %addtmp7, i32* @m
  %6 = load i32, i32* @m
  %7 = load i32, i32* @n
  store i32 %6, i32* @j
  br label %for8

forcontinue5:                                     ; preds = %for3
  %printfCall = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @4, i32 0, i32 0))
  %printfCall18 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %8 = load i32, i32* @count
  %printfCall19 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32 %8)
  %printfCall20 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  ret i32 1

for8:                                             ; preds = %ifcontinue, %forcont4
  %9 = load i32, i32* @j
  %lecomparetmp11 = icmp ule i32 %9, %7
  br i1 %lecomparetmp11, label %forcont9, label %forcontinue10

forcont9:                                         ; preds = %for8
  %10 = load i32, i32* @i
  %ar_Index12 = getelementptr [100000 x i32], [100000 x i32]* @ar, i32 0, i32 %10
  %11 = load i32, i32* %ar_Index12
  %12 = load i32, i32* @j
  %ar_Index13 = getelementptr [100000 x i32], [100000 x i32]* @ar, i32 0, i32 %12
  %13 = load i32, i32* %ar_Index13
  %addtmp14 = add i32 %11, %13
  store i32 %addtmp14, i32* @sum
  %14 = load i32, i32* @sum
  %15 = load i32, i32* @k
  %equalcomparetmp = icmp eq i32 %14, %15
  %AND = and i1 true, %equalcomparetmp
  %OR = or i1 false, %AND
  br i1 %OR, label %if, label %ifcontinue

forcontinue10:                                    ; preds = %for8
  %addtmp17 = add i32 %4, 1
  store i32 %addtmp17, i32* @i
  br label %for3

if:                                               ; preds = %forcont9
  %16 = load i32, i32* @count
  %addtmp15 = add i32 %16, 1
  store i32 %addtmp15, i32* @count
  br label %ifcontinue

ifcontinue:                                       ; preds = %if, %forcont9
  %addtmp16 = add i32 %9, 1
  store i32 %addtmp16, i32* @j
  br label %for8
}

declare i32 @printf(...)

declare i32 @scanf(...)
