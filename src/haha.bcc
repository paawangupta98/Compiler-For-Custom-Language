; ModuleID = 'IR Generator'

@0 = private unnamed_addr constant [2 x i8] c"\0A\00"
@1 = private unnamed_addr constant [2 x i8] c" \00"
@x0 = common global i32 0, align 4
@yar = common global i32 0, align 4
@zarray = common global [102 x i32] zeroinitializer, align 4
@tarrya = common global i32 0, align 4
@i = common global i32 0, align 4
@2 = private unnamed_addr constant [5 x i8] c"haha\00"
@3 = private unnamed_addr constant [6 x i8] c"haha1\00"
@4 = private unnamed_addr constant [3 x i8] c"qw\00"
@5 = private unnamed_addr constant [3 x i8] c"ty\00"
@6 = private unnamed_addr constant [5 x i8] c"why?\00"

define i32 @main() {
entry:
  store i32 6, i32* @x0
  %0 = load i32, i32* @x0
  %subtmp = sub i32 %0, 624
  %addtmp = add i32 7, %subtmp
  store i32 %addtmp, i32* @yar
  store i32 5, i32* @x0
  store i32 1, i32* @i
  br label %for

for:                                              ; preds = %forcont, %entry
  %1 = load i32, i32* @i
  %lecomparetmp = icmp ule i32 %1, 10
  br i1 %lecomparetmp, label %forcont, label %forcontinue

forcont:                                          ; preds = %for
  %printfCall = call i32 (...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0))
  %printfCall1 = call i32 (...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %addtmp2 = add i32 %1, 1
  store i32 %addtmp2, i32* @i
  br label %for

forcontinue:                                      ; preds = %for
  %2 = load i32, i32* @x0
  %equalcomparetmp = icmp eq i32 %2, 5
  %AND = and i1 true, %equalcomparetmp
  %OR = or i1 false, %AND
  br i1 %OR, label %if, label %ifcontinue

if:                                               ; preds = %forcontinue
  %printfCall3 = call i32 (...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @3, i32 0, i32 0))
  %printfCall4 = call i32 (...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %ifcontinue

ifcontinue:                                       ; preds = %if, %forcontinue
  %3 = load i32, i32* @yar
  %gtcomparetmp = icmp ugt i32 %3, 10
  %AND5 = and i1 true, %gtcomparetmp
  %OR6 = or i1 false, %AND5
  br i1 %OR6, label %if7, label %else

if7:                                              ; preds = %ifcontinue
  %printfCall8 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0))
  %printfCall9 = call i32 (...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %ifelsecontinue

else:                                             ; preds = %ifcontinue
  %printfCall10 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @5, i32 0, i32 0))
  %printfCall11 = call i32 (...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %ifelsecontinue

ifelsecontinue:                                   ; preds = %else, %if7
  br label %while

while:                                            ; preds = %whilecont, %ifelsecontinue
  %4 = load i32, i32* @x0
  %ltcomparetmp = icmp ult i32 %4, 10
  %AND12 = and i1 true, %ltcomparetmp
  %OR13 = or i1 false, %AND12
  br i1 %OR13, label %whilecont, label %whilecontinue

whilecont:                                        ; preds = %while
  %5 = load i32, i32* @x0
  %addtmp14 = add i32 %5, 2
  store i32 %addtmp14, i32* @x0
  %printfCall15 = call i32 (...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0))
  %printfCall16 = call i32 (...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  br label %while

whilecontinue:                                    ; preds = %while
  ret i32 1
}

declare i32 @printf(...)
