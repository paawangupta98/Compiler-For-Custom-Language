; ModuleID = 'IR Generator'

@0 = private unnamed_addr constant [2 x i8] c"\0A\00"
@1 = private unnamed_addr constant [2 x i8] c" \00"
@2 = private unnamed_addr constant [3 x i8] c"%d\00"
@3 = private unnamed_addr constant [3 x i8] c"%s\00"
@i = common global i32 0, align 4
@temp = common global i32 0, align 4
@gcd = common global i32 0, align 4
@j = common global i32 0, align 4
@a = common global i32 0, align 4
@b = common global i32 0, align 4
@n = common global i32 0, align 4
@ar = common global [100000 x i32] zeroinitializer, align 4
@4 = private unnamed_addr constant [7 x i8] c"GCD = \00"

define i32 @main() {
entry:
  %readCall = call i32 (...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* @n)
  %0 = load i32, i32* @n
  store i32 1, i32* @i
  br label %for

for:                                              ; preds = %forcont, %entry
  %1 = load i32, i32* @i
  %lecomparetmp = icmp ule i32 %1, %0
  br i1 %lecomparetmp, label %forcont, label %forcontinue

forcont:                                          ; preds = %for
  %2 = load i32, i32* @i
  %ar_Index = getelementptr [100000 x i32], [100000 x i32]* @ar, i32 0, i32 %2
  %readCall1 = call i32 (...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32* %ar_Index)
  %addtmp = add i32 %1, 1
  store i32 %addtmp, i32* @i
  br label %for

forcontinue:                                      ; preds = %for
  %3 = load i32, i32* getelementptr inbounds ([100000 x i32], [100000 x i32]* @ar, i32 0, i32 1)
  store i32 %3, i32* @gcd
  %4 = load i32, i32* @n
  store i32 2, i32* @i
  br label %for2

for2:                                             ; preds = %whilecontinue, %forcontinue
  %5 = load i32, i32* @i
  %lecomparetmp5 = icmp ule i32 %5, %4
  br i1 %lecomparetmp5, label %forcont3, label %forcontinue4

forcont3:                                         ; preds = %for2
  %6 = load i32, i32* @i
  %ar_Index6 = getelementptr [100000 x i32], [100000 x i32]* @ar, i32 0, i32 %6
  %7 = load i32, i32* %ar_Index6
  store i32 %7, i32* @a
  %8 = load i32, i32* @gcd
  store i32 %8, i32* @b
  br label %while

forcontinue4:                                     ; preds = %for2
  %printfCall = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @4, i32 0, i32 0))
  %printfCall8 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %9 = load i32, i32* @gcd
  %printfCall9 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), i32 %9)
  %printfCall10 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  ret i32 1

while:                                            ; preds = %whilecont, %forcont3
  %10 = load i32, i32* @a
  %notequalcomparetmp = icmp ne i32 %10, 0
  %AND = and i1 true, %notequalcomparetmp
  %OR = or i1 false, %AND
  br i1 %OR, label %whilecont, label %whilecontinue

whilecont:                                        ; preds = %while
  %11 = load i32, i32* @a
  store i32 %11, i32* @temp
  %12 = load i32, i32* @b
  %13 = load i32, i32* @a
  %modtmp = urem i32 %12, %13
  store i32 %modtmp, i32* @a
  %14 = load i32, i32* @temp
  store i32 %14, i32* @b
  br label %while

whilecontinue:                                    ; preds = %while
  %15 = load i32, i32* @b
  store i32 %15, i32* @gcd
  %addtmp7 = add i32 %5, 1
  store i32 %addtmp7, i32* @i
  br label %for2
}

declare i32 @printf(...)

declare i32 @scanf(...)
